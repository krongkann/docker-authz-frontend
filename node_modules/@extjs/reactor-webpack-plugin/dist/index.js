'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _cjson = require('cjson');

var _cjson2 = _interopRequireDefault(_cjson);

var _mkdirp = require('mkdirp');

var _extractFromJSX = require('./extractFromJSX');

var _extractFromJSX2 = _interopRequireDefault(_extractFromJSX);

var _rimraf = require('rimraf');

var _artifacts = require('./artifacts');

var _child_process = require('child_process');

var _astring = require('astring');

var _resolve = require('resolve');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var watching = false;
var cmdErrors = void 0;

/**
 * Scrapes Sencha Cmd output, adding error messages to cmdErrors;
 * @param {Process} build A sencha Cmd process
 */
var gatherErrors = function gatherErrors(cmd) {
    cmd.stdout.on('data', function (data) {
        var message = data.toString();

        if (message.match(/^\[ERR\]/)) {
            cmdErrors.push(message.replace(/^\[ERR\] /gi, ''));
        }
    });

    return cmd;
};

/**
 * Produces a minimal build of ExtReact by crawling your React source code and extracting the xtypes used
 * in JSX tags
 */
module.exports = function () {

    /**
     * @param {Object[]} builds
     * @param {Boolean} [debug=false] Set to true to prevent cleanup of build temporary build artifacts that might be helpful in troubleshooting issues.
     * @param {String} sdk The full path to the ExtReact SDK
     * @param {String} [toolkit='modern'] "modern" or "classic"
     * @param {String} theme The name of the ExtReact theme package to use, for example "theme-material"
     * @param {String[]} packages An array of ExtReact packages to include
     * @param {String[]} overrides An array with the paths of directories or files to search. Any classes
     * declared in these locations will be automatically required and included in the build.
     * If any file defines an ExtReact override (using Ext.define with an "override" property),
     * that override will in fact only be included in the build if the target class specified
     * in the "override" property is also included.
     * @param {String} output The path to directory where the ExtReact bundle should be written
     * @param {Boolean} asynchronous Set to true to run Sencha Cmd builds asynchronously. This makes the webpack build finish much faster, but the app may not load correctly in your browser until Sencha Cmd is finished building the ExtReact bundle
     * @param {Boolean} production Set to true for production builds.  This tell Sencha Cmd to compress the generated JS bundle.
     * @param {Boolean} treeShaking Set to false to disable tree shaking in development builds.  This makes incremental rebuilds faster as all ExtReact components are included in the ext.js bundle in the initial build and thus the bundle does not need to be rebuilt after each change. Defaults to true.
     */
    function ReactExtJSWebpackPlugin(options) {
        _classCallCheck(this, ReactExtJSWebpackPlugin);

        // if .ext-reactrc file exists, consume it and apply it to config options.
        var extReactRc = _fs2.default.existsSync('.ext-reactrc') && JSON.parse(_fs2.default.readFileSync('.ext-reactrc', 'utf-8')) || {};

        options = _extends({}, this.getDefaultOptions(), options, extReactRc);
        var _options = options,
            builds = _options.builds;


        if (Object.keys(builds).length === 0) {
            var _options2 = options,
                _builds = _options2.builds,
                buildOptions = _objectWithoutProperties(_options2, ['builds']);

            _builds.ext = buildOptions;
        }

        for (var name in builds) {
            this._validateBuildConfig(name, builds[name]);
        }Object.assign(this, _extends({}, options, {
            currentFile: null,
            manifest: null,
            dependencies: []
        }));
    }

    /**
     * Default config options
     * @protected
     * @return {Object}
     */


    _createClass(ReactExtJSWebpackPlugin, [{
        key: 'getDefaultOptions',
        value: function getDefaultOptions() {
            return {
                builds: {},
                debug: false,
                watch: false,
                test: /\.(j|t)sx?$/,

                /* begin single build only */
                output: 'ext-react',
                toolkit: 'modern',
                packages: null,
                packageDirs: [],
                overrides: [],
                asynchronous: false,
                production: false,
                manifestExtractor: _extractFromJSX2.default,
                treeShaking: true
                /* end single build only */
            };
        }
    }, {
        key: 'apply',
        value: function apply(compiler) {
            var _this = this;

            var me = this;

            /**
             * Adds the code for the specified function call to the manifest.js file
             * @param {Object} call A function call AST node.
             */
            var addToManifest = function addToManifest(call) {
                try {
                    var _file = this.state.module.resource;
                    me.dependencies[_file] = [].concat(_toConsumableArray(me.dependencies[_file] || []), [(0, _astring.generate)(call)]);
                } catch (e) {
                    console.error('Error processing ' + file);
                }
            };

            compiler.plugin('watch-run', function (watching, cb) {
                _this.watch = true;
                cb();
            });

            // extract xtypes from JSX tags
            compiler.plugin('compilation', function (compilation, data) {
                compilation.plugin('succeed-module', function (module) {
                    _this.currentFile = module.resource;

                    if (module.resource && module.resource.match(_this.test) && !module.resource.match(/node_modules/)) {
                        var doParse = function doParse() {
                            _this.dependencies[_this.currentFile] = [].concat(_toConsumableArray(_this.dependencies[_this.currentFile] || []), _toConsumableArray(_this.manifestExtractor(module._source._value, compilation, module)));
                        };

                        if (_this.debug) {
                            doParse();
                        } else {
                            try {
                                doParse();
                            } catch (e) {
                                console.error('error parsing ' + _this.currentFile);
                            }
                        }
                    }
                });

                data.normalModuleFactory.plugin("parser", function (parser, options) {
                    // extract xtypes and classes from Ext.create calls
                    parser.plugin('call Ext.create', addToManifest);

                    // copy Ext.require calls to the manifest.  This allows the users to explicitly require a class if the plugin fails to detect it.
                    parser.plugin('call Ext.require', addToManifest);

                    // copy Ext.define calls to the manifest.  This allows users to write standard ExtReact classes.
                    parser.plugin('call Ext.define', addToManifest);
                });
            });

            // once all modules are processed, create the optimized ExtReact build.
            compiler.plugin('emit', function (compilation, callback) {
                var modules = compilation.chunks.reduce(function (a, b) {
                    return a.concat(b.modules);
                }, []);
                var build = _this.builds[Object.keys(_this.builds)[0]];

                var outputPath = _path2.default.join(compiler.outputPath, _this.output);

                // webpack-dev-server overwrites the outputPath to "/", so we need to prepend contentBase
                if (compiler.outputPath === '/' && compiler.options.devServer) {
                    outputPath = _path2.default.join(compiler.options.devServer.contentBase, outputPath);
                }

                // the following is needed for html-webpack-plugin to include <script> and <link> tags for ExtReact
                var jsChunk = compilation.addChunk(_this.output + '-js');

                jsChunk.hasRuntime = jsChunk.isInitial = function () {
                    return true;
                };
                jsChunk.files.push(_path2.default.join(_this.output, 'ext.js'));
                jsChunk.files.push(_path2.default.join(_this.output, 'ext.css'));
                jsChunk.id = -2; // this forces html-webpack-plugin to include ext.js first

                if (_this.asynchronous) callback();

                _this._buildExtBundle('ext', modules, outputPath, build).then(function () {
                    // const cssVarPath = path.join(this.output, 'css-vars.js');

                    // if (fs.existsSync(path.join(outputPath, 'css-vars.js'))) {
                    //     const cssVarChunk = compilation.addChunk(`${this.output}-css-vars`);
                    //     cssVarChunk.hasRuntime = cssVarChunk.isInitial = () => true;
                    //     cssVarChunk.files.push(cssVarPath);
                    //     cssVarChunk.id = -1;
                    // }
                    !_this.asynchronous && callback();
                }).catch(function (e) {
                    compilation.errors.push(new Error('[@extjs/reactor-webpack-plugin]: ' + e.toString()));
                    !_this.asynchronous && callback();
                });
            });
        }

        /**
         * Checks each build config for missing/invalid properties
         * @param {String} name The name of the build
         * @param {String} build The build config
         * @private
         */

    }, {
        key: '_validateBuildConfig',
        value: function _validateBuildConfig(name, build) {
            var sdk = build.sdk,
                production = build.production;


            if (production) {
                build.treeShaking = true;
            }

            if (sdk) {
                if (!_fs2.default.existsSync(sdk)) {
                    throw new Error('No SDK found at ' + _path2.default.resolve(sdk) + '.  Did you for get to link/copy your Ext JS SDK to that location?');
                } else {
                    this._addReactorPackage(build);
                }
            } else {
                try {
                    build.sdk = _path2.default.dirname((0, _resolve.sync)('@extjs/ext-react', { basedir: process.cwd() }));
                    build.packageDirs = [].concat(_toConsumableArray(build.packageDirs || []), [_path2.default.dirname(build.sdk)]);
                    build.packages = build.packages || this._findPackages(build.sdk);
                } catch (e) {
                    throw new Error('@extjs/ext-react not found.  You can install it with "npm install --save @extjs/ext-react" or, if you have a local copy of the SDK, specify the path to it using the "sdk" option in build "' + name + '."');
                }
            }
        }

        /**
         * Adds the reactor package if present and the toolkit is modern
         * @param {Object} build 
         */

    }, {
        key: '_addReactorPackage',
        value: function _addReactorPackage(build) {
            if (build.toolkit === 'classic') return;

            if (_fs2.default.existsSync(_path2.default.join(build.sdk, 'ext', 'modern', 'reactor')) || // repo
            _fs2.default.existsSync(_path2.default.join(build.sdk, 'modern', 'reactor'))) {
                // production build

                if (!build.packages) {
                    build.packages = [];
                }

                build.packages.push('reactor');
            }
        }

        /**
         * Return the names of all ExtReact packages in the same parent directory as ext-react (typically node_modules/@extjs)
         * @private
         * @param {String} sdk Path to ext-react
         * @return {String[]}
         */

    }, {
        key: '_findPackages',
        value: function _findPackages(sdk) {
            var modulesDir = _path2.default.join(sdk, '..');

            return _fs2.default.readdirSync(modulesDir)
            // Filter out directories without 'package.json'
            .filter(function (dir) {
                return _fs2.default.existsSync(_path2.default.join(modulesDir, dir, 'package.json'));
            })
            // Generate array of package names
            .map(function (dir) {
                var packageInfo = JSON.parse(_fs2.default.readFileSync(_path2.default.join(modulesDir, dir, 'package.json')));
                // Don't include theme type packages.
                if (packageInfo.sencha && packageInfo.sencha.type !== 'theme') {
                    return packageInfo.sencha.name;
                }
            })
            // Remove any undefineds from map
            .filter(function (name) {
                return name;
            });
        }

        /**
         * Returns the path to the sencha cmd executable
         * @private
         * @return {String}
         */

    }, {
        key: '_getSenchCmdPath',
        value: function _getSenchCmdPath() {
            try {
                // use @extjs/sencha-cmd from node_modules
                return require('@extjs/sencha-cmd');
            } catch (e) {
                // attempt to use globally installed Sencha Cmd
                return 'sencha';
            }
        }

        /**
         /**
         * Builds a minimal version of the ExtReact framework based on the classes used
         * @param {String} name The name of the build
         * @param {Module[]} modules webpack modules
         * @param {String} output The path to where the framework build should be written
         * @param {String} [toolkit='modern'] "modern" or "classic"
         * @param {String} output The path to the directory to create which will contain the js and css bundles
         * @param {String} theme The name of the ExtReact theme package to use, for example "theme-material"
         * @param {String[]} packages An array of ExtReact packages to include
         * @param {String[]} packageDirs Directories containing packages
         * @param {String[]} overrides An array of locations for overrides
         * @param {String} sdk The full path to the ExtReact SDK
         * @private
         */

    }, {
        key: '_buildExtBundle',
        value: function _buildExtBundle(name, modules, output, _ref) {
            var _this2 = this;

            var _ref$toolkit = _ref.toolkit,
                toolkit = _ref$toolkit === undefined ? 'modern' : _ref$toolkit,
                theme = _ref.theme,
                _ref$packages = _ref.packages,
                packages = _ref$packages === undefined ? [] : _ref$packages,
                _ref$packageDirs = _ref.packageDirs,
                packageDirs = _ref$packageDirs === undefined ? [] : _ref$packageDirs,
                sdk = _ref.sdk,
                overrides = _ref.overrides;

            var sencha = this._getSenchCmdPath();

            theme = theme || (toolkit === 'classic' ? 'theme-triton' : 'theme-material');

            return new Promise(function (resolve, reject) {
                _this2.onBuildFail = reject;
                _this2.onBuildSuccess = resolve;

                cmdErrors = [];

                var onBuildDone = function onBuildDone() {
                    if (cmdErrors.length) {
                        _this2.onBuildFail(new Error(cmdErrors.join("")));
                    } else {
                        _this2.onBuildSuccess();
                    }
                };

                if (!watching) {
                    (0, _rimraf.sync)(output);
                    (0, _mkdirp.sync)(output);
                }

                var js = void 0;

                if (_this2.treeShaking) {
                    var statements = ['Ext.require(["Ext.app.Application", "Ext.Component", "Ext.Widget"])']; // for some reason command doesn't load component when only panel is required

                    if (packages.indexOf('reactor') !== -1) {
                        statements.push('Ext.require("Ext.reactor.RendererCell")');
                    }

                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = modules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var _module = _step.value;

                            var deps = _this2.dependencies[_module.resource];
                            if (deps) statements = statements.concat(deps);
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator.return) {
                                _iterator.return();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    js = statements.join(';\n');
                } else {
                    js = 'Ext.require("Ext.*")';
                }

                var manifest = _path2.default.join(output, 'manifest.js');

                // add ext-react/packages automatically if present
                var userPackages = _path2.default.join('.', 'ext-react', 'packages');

                if (_fs2.default.existsSync(userPackages)) {
                    packageDirs.push(userPackages);
                }

                if (_fs2.default.existsSync(_path2.default.join(sdk, 'ext'))) {
                    // local checkout of the SDK repo
                    packageDirs.push(_path2.default.join('ext', 'packages'));
                    sdk = _path2.default.join(sdk, 'ext');
                }

                if (!watching) {
                    _fs2.default.writeFileSync(_path2.default.join(output, 'build.xml'), (0, _artifacts.buildXML)({ compress: _this2.production }), 'utf8');
                    _fs2.default.writeFileSync(_path2.default.join(output, 'jsdom-environment.js'), (0, _artifacts.createJSDOMEnvironment)(), 'utf8');
                    _fs2.default.writeFileSync(_path2.default.join(output, 'app.json'), (0, _artifacts.createAppJson)({ theme: theme, packages: packages, toolkit: toolkit, overrides: overrides, packageDirs: packageDirs }), 'utf8');
                    _fs2.default.writeFileSync(_path2.default.join(output, 'workspace.json'), (0, _artifacts.createWorkspaceJson)(sdk, packageDirs, output), 'utf8');
                }

                var cmdRebuildNeeded = false;

                if (_this2.manifest === null || js !== _this2.manifest) {
                    // Only write manifest if it differs from the last run.  This prevents unnecessary cmd rebuilds.
                    _this2.manifest = js;
                    _fs2.default.writeFileSync(manifest, js, 'utf8');
                    cmdRebuildNeeded = true;
                    console.log('\nbuilding ExtReact bundle: ' + name + ' => ' + output);
                }

                if (_this2.watch) {
                    if (!watching) {
                        watching = gatherErrors((0, _child_process.fork)(sencha, ['ant', 'watch'], { cwd: output, silent: true }));
                        watching.stderr.pipe(process.stderr);
                        watching.stdout.pipe(process.stdout);
                        watching.stdout.on('data', function (data) {
                            if (data && data.toString().match(/Waiting for changes\.\.\./)) {
                                onBuildDone();
                            }
                        });
                        watching.on('exit', onBuildDone);
                    }

                    if (!cmdRebuildNeeded) onBuildDone();
                } else {
                    var build = gatherErrors((0, _child_process.fork)(sencha, ['ant', 'build'], { cwd: output, silent: true }));
                    build.stdout.pipe(process.stdout);
                    build.stderr.pipe(process.stderr);
                    build.on('exit', onBuildDone);
                }
            });
        }
    }]);

    return ReactExtJSWebpackPlugin;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,